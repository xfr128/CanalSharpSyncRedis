// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Assets/CanalEntry.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CanalSharp.Protocol {

  /// <summary>Holder for reflection information generated from Assets/CanalEntry.proto</summary>
  public static partial class CanalEntryReflection {

    #region Descriptor
    /// <summary>File descriptor for Assets/CanalEntry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CanalEntryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdBc3NldHMvQ2FuYWxFbnRyeS5wcm90byJqCgVFbnRyeRIXCgZoZWFkZXIY",
            "ASABKAsyBy5IZWFkZXISHwoJZW50cnlUeXBlGAIgASgOMgouRW50cnlUeXBl",
            "SAASEgoKc3RvcmVWYWx1ZRgDIAEoDEITChFlbnRyeVR5cGVfcHJlc2VudCLg",
            "AgoGSGVhZGVyEhEKB3ZlcnNpb24YASABKAVIABITCgtsb2dmaWxlTmFtZRgC",
            "IAEoCRIVCg1sb2dmaWxlT2Zmc2V0GAMgASgDEhAKCHNlcnZlcklkGAQgASgD",
            "EhQKDHNlcnZlcmVuQ29kZRgFIAEoCRITCgtleGVjdXRlVGltZRgGIAEoAxIb",
            "Cgpzb3VyY2VUeXBlGAcgASgOMgUuVHlwZUgBEhIKCnNjaGVtYU5hbWUYCCAB",
            "KAkSEQoJdGFibGVOYW1lGAkgASgJEhMKC2V2ZW50TGVuZ3RoGAogASgDEh8K",
            "CWV2ZW50VHlwZRgLIAEoDjIKLkV2ZW50VHlwZUgCEhQKBXByb3BzGAwgAygL",
            "MgUuUGFpchIMCgRndGlkGA0gASgJQhEKD3ZlcnNpb25fcHJlc2VudEIUChJz",
            "b3VyY2VUeXBlX3ByZXNlbnRCEwoRZXZlbnRUeXBlX3ByZXNlbnQiwgEKBkNv",
            "bHVtbhINCgVpbmRleBgBIAEoBRIPCgdzcWxUeXBlGAIgASgFEgwKBG5hbWUY",
            "AyABKAkSDQoFaXNLZXkYBCABKAgSDwoHdXBkYXRlZBgFIAEoCBIQCgZpc051",
            "bGwYBiABKAhIABIUCgVwcm9wcxgHIAMoCzIFLlBhaXISDQoFdmFsdWUYCCAB",
            "KAkSDgoGbGVuZ3RoGAkgASgFEhEKCW15c3FsVHlwZRgKIAEoCUIQCg5pc051",
            "bGxfcHJlc2VudCJeCgdSb3dEYXRhEh4KDWJlZm9yZUNvbHVtbnMYASADKAsy",
            "By5Db2x1bW4SHQoMYWZ0ZXJDb2x1bW5zGAIgAygLMgcuQ29sdW1uEhQKBXBy",
            "b3BzGAMgAygLMgUuUGFpciLKAQoJUm93Q2hhbmdlEg8KB3RhYmxlSWQYASAB",
            "KAMSHwoJZXZlbnRUeXBlGAIgASgOMgouRXZlbnRUeXBlSAASDwoFaXNEZGwY",
            "CiABKAhIARILCgNzcWwYCyABKAkSGgoIcm93RGF0YXMYDCADKAsyCC5Sb3dE",
            "YXRhEhQKBXByb3BzGA0gAygLMgUuUGFpchIVCg1kZGxTY2hlbWFOYW1lGA4g",
            "ASgJQhMKEWV2ZW50VHlwZV9wcmVzZW50Qg8KDWlzRGRsX3ByZXNlbnQiZgoQ",
            "VHJhbnNhY3Rpb25CZWdpbhITCgtleGVjdXRlVGltZRgBIAEoAxIVCg10cmFu",
            "c2FjdGlvbklkGAIgASgJEhQKBXByb3BzGAMgAygLMgUuUGFpchIQCgh0aHJl",
            "YWRJZBgEIAEoAyJSCg5UcmFuc2FjdGlvbkVuZBITCgtleGVjdXRlVGltZRgB",
            "IAEoAxIVCg10cmFuc2FjdGlvbklkGAIgASgJEhQKBXByb3BzGAMgAygLMgUu",
            "UGFpciIiCgRQYWlyEgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCSp9CglF",
            "bnRyeVR5cGUSHQoZRU5UUllUWVBFQ09NUEFUSUJMRVBST1RPMhAAEhQKEFRS",
            "QU5TQUNUSU9OQkVHSU4QARILCgdST1dEQVRBEAISEgoOVFJBTlNBQ1RJT05F",
            "TkQQAxINCglIRUFSVEJFQVQQBBILCgdHVElETE9HEAUq5QEKCUV2ZW50VHlw",
            "ZRIdChlFVkVOVFRZUEVDT01QQVRJQkxFUFJPVE8yEAASCgoGSU5TRVJUEAES",
            "CgoGVVBEQVRFEAISCgoGREVMRVRFEAMSCgoGQ1JFQVRFEAQSCQoFQUxURVIQ",
            "BRIJCgVFUkFTRRAGEgkKBVFVRVJZEAcSDAoIVFJVTkNBVEUQCBIKCgZSRU5B",
            "TUUQCRIKCgZDSU5ERVgQChIKCgZESU5ERVgQCxIICgRHVElEEAwSDAoIWEFD",
            "T01NSVQQDRIOCgpYQVJPTExCQUNLEA4SDgoKTUhFQVJUQkVBVBAPKkIKBFR5",
            "cGUSGAoUVFlQRUNPTVBBVElCTEVQUk9UTzIQABIKCgZPUkFDTEUQARIJCgVN",
            "WVNRTBACEgkKBVBHU1FMEANCGEgBqgITQ2FuYWxTaGFycC5Qcm90b2NvbGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CanalSharp.Protocol.EntryType), typeof(global::CanalSharp.Protocol.EventType), typeof(global::CanalSharp.Protocol.Type), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CanalSharp.Protocol.Entry), global::CanalSharp.Protocol.Entry.Parser, new[]{ "Header", "EntryType", "StoreValue" }, new[]{ "EntryTypePresent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CanalSharp.Protocol.Header), global::CanalSharp.Protocol.Header.Parser, new[]{ "Version", "LogfileName", "LogfileOffset", "ServerId", "ServerenCode", "ExecuteTime", "SourceType", "SchemaName", "TableName", "EventLength", "EventType", "Props", "Gtid" }, new[]{ "VersionPresent", "SourceTypePresent", "EventTypePresent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CanalSharp.Protocol.Column), global::CanalSharp.Protocol.Column.Parser, new[]{ "Index", "SqlType", "Name", "IsKey", "Updated", "IsNull", "Props", "Value", "Length", "MysqlType" }, new[]{ "IsNullPresent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CanalSharp.Protocol.RowData), global::CanalSharp.Protocol.RowData.Parser, new[]{ "BeforeColumns", "AfterColumns", "Props" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CanalSharp.Protocol.RowChange), global::CanalSharp.Protocol.RowChange.Parser, new[]{ "TableId", "EventType", "IsDdl", "Sql", "RowDatas", "Props", "DdlSchemaName" }, new[]{ "EventTypePresent", "IsDdlPresent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CanalSharp.Protocol.TransactionBegin), global::CanalSharp.Protocol.TransactionBegin.Parser, new[]{ "ExecuteTime", "TransactionId", "Props", "ThreadId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CanalSharp.Protocol.TransactionEnd), global::CanalSharp.Protocol.TransactionEnd.Parser, new[]{ "ExecuteTime", "TransactionId", "Props" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CanalSharp.Protocol.Pair), global::CanalSharp.Protocol.Pair.Parser, new[]{ "Key", "Value" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*打散后的事件类型，主要用于标识事务的开始，变更数据，结束*
  /// </summary>
  public enum EntryType {
    [pbr::OriginalName("ENTRYTYPECOMPATIBLEPROTO2")] Compatibleproto2 = 0,
    [pbr::OriginalName("TRANSACTIONBEGIN")] Transactionbegin = 1,
    [pbr::OriginalName("ROWDATA")] Rowdata = 2,
    [pbr::OriginalName("TRANSACTIONEND")] Transactionend = 3,
    /// <summary>
    ///* 心跳类型，内部使用，外部暂不可见，可忽略 *
    /// </summary>
    [pbr::OriginalName("HEARTBEAT")] Heartbeat = 4,
    [pbr::OriginalName("GTIDLOG")] Gtidlog = 5,
  }

  /// <summary>
  ///* 事件类型 *
  /// </summary>
  public enum EventType {
    [pbr::OriginalName("EVENTTYPECOMPATIBLEPROTO2")] Compatibleproto2 = 0,
    [pbr::OriginalName("INSERT")] Insert = 1,
    [pbr::OriginalName("UPDATE")] Update = 2,
    [pbr::OriginalName("DELETE")] Delete = 3,
    [pbr::OriginalName("CREATE")] Create = 4,
    [pbr::OriginalName("ALTER")] Alter = 5,
    [pbr::OriginalName("ERASE")] Erase = 6,
    [pbr::OriginalName("QUERY")] Query = 7,
    [pbr::OriginalName("TRUNCATE")] Truncate = 8,
    [pbr::OriginalName("RENAME")] Rename = 9,
    /// <summary>
    ///*CREATE INDEX*
    /// </summary>
    [pbr::OriginalName("CINDEX")] Cindex = 10,
    [pbr::OriginalName("DINDEX")] Dindex = 11,
    [pbr::OriginalName("GTID")] Gtid = 12,
    /// <summary>
    ///* XA *
    /// </summary>
    [pbr::OriginalName("XACOMMIT")] Xacommit = 13,
    [pbr::OriginalName("XAROLLBACK")] Xarollback = 14,
    /// <summary>
    ///* MASTER HEARTBEAT *
    /// </summary>
    [pbr::OriginalName("MHEARTBEAT")] Mheartbeat = 15,
  }

  /// <summary>
  ///*数据库类型*
  /// </summary>
  public enum Type {
    [pbr::OriginalName("TYPECOMPATIBLEPROTO2")] Compatibleproto2 = 0,
    [pbr::OriginalName("ORACLE")] Oracle = 1,
    [pbr::OriginalName("MYSQL")] Mysql = 2,
    [pbr::OriginalName("PGSQL")] Pgsql = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///***************************************************************
  /// message model
  ///如果要在Enum中新增类型，确保以前的类型的下标值不变.
  ///**************************************************************
  /// </summary>
  public sealed partial class Entry : pb::IMessage<Entry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Entry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CanalSharp.Protocol.CanalEntryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entry(Entry other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      storeValue_ = other.storeValue_;
      switch (other.EntryTypePresentCase) {
        case EntryTypePresentOneofCase.EntryType:
          EntryType = other.EntryType;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Entry Clone() {
      return new Entry(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::CanalSharp.Protocol.Header header_;
    /// <summary>
    ///*协议头部信息*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CanalSharp.Protocol.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "entryType" field.</summary>
    public const int EntryTypeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CanalSharp.Protocol.EntryType EntryType {
      get { return entryTypePresentCase_ == EntryTypePresentOneofCase.EntryType ? (global::CanalSharp.Protocol.EntryType) entryTypePresent_ : global::CanalSharp.Protocol.EntryType.Compatibleproto2; }
      set {
        entryTypePresent_ = value;
        entryTypePresentCase_ = EntryTypePresentOneofCase.EntryType;
      }
    }

    /// <summary>Field number for the "storeValue" field.</summary>
    public const int StoreValueFieldNumber = 3;
    private pb::ByteString storeValue_ = pb::ByteString.Empty;
    /// <summary>
    ///*传输的二进制数组*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StoreValue {
      get { return storeValue_; }
      set {
        storeValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object entryTypePresent_;
    /// <summary>Enum of possible cases for the "entryType_present" oneof.</summary>
    public enum EntryTypePresentOneofCase {
      None = 0,
      EntryType = 2,
    }
    private EntryTypePresentOneofCase entryTypePresentCase_ = EntryTypePresentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntryTypePresentOneofCase EntryTypePresentCase {
      get { return entryTypePresentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntryTypePresent() {
      entryTypePresentCase_ = EntryTypePresentOneofCase.None;
      entryTypePresent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Entry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Entry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (EntryType != other.EntryType) return false;
      if (StoreValue != other.StoreValue) return false;
      if (EntryTypePresentCase != other.EntryTypePresentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (entryTypePresentCase_ == EntryTypePresentOneofCase.EntryType) hash ^= EntryType.GetHashCode();
      if (StoreValue.Length != 0) hash ^= StoreValue.GetHashCode();
      hash ^= (int) entryTypePresentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (entryTypePresentCase_ == EntryTypePresentOneofCase.EntryType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EntryType);
      }
      if (StoreValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(StoreValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (entryTypePresentCase_ == EntryTypePresentOneofCase.EntryType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EntryType);
      }
      if (StoreValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(StoreValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (entryTypePresentCase_ == EntryTypePresentOneofCase.EntryType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntryType);
      }
      if (StoreValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StoreValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Entry other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::CanalSharp.Protocol.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.StoreValue.Length != 0) {
        StoreValue = other.StoreValue;
      }
      switch (other.EntryTypePresentCase) {
        case EntryTypePresentOneofCase.EntryType:
          EntryType = other.EntryType;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::CanalSharp.Protocol.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            entryTypePresent_ = input.ReadEnum();
            entryTypePresentCase_ = EntryTypePresentOneofCase.EntryType;
            break;
          }
          case 26: {
            StoreValue = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::CanalSharp.Protocol.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 16: {
            entryTypePresent_ = input.ReadEnum();
            entryTypePresentCase_ = EntryTypePresentOneofCase.EntryType;
            break;
          }
          case 26: {
            StoreValue = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*message Header*
  /// </summary>
  public sealed partial class Header : pb::IMessage<Header>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CanalSharp.Protocol.CanalEntryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      logfileName_ = other.logfileName_;
      logfileOffset_ = other.logfileOffset_;
      serverId_ = other.serverId_;
      serverenCode_ = other.serverenCode_;
      executeTime_ = other.executeTime_;
      schemaName_ = other.schemaName_;
      tableName_ = other.tableName_;
      eventLength_ = other.eventLength_;
      props_ = other.props_.Clone();
      gtid_ = other.gtid_;
      switch (other.VersionPresentCase) {
        case VersionPresentOneofCase.Version:
          Version = other.Version;
          break;
      }

      switch (other.SourceTypePresentCase) {
        case SourceTypePresentOneofCase.SourceType:
          SourceType = other.SourceType;
          break;
      }

      switch (other.EventTypePresentCase) {
        case EventTypePresentOneofCase.EventType:
          EventType = other.EventType;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return versionPresentCase_ == VersionPresentOneofCase.Version ? (int) versionPresent_ : 0; }
      set {
        versionPresent_ = value;
        versionPresentCase_ = VersionPresentOneofCase.Version;
      }
    }

    /// <summary>Field number for the "logfileName" field.</summary>
    public const int LogfileNameFieldNumber = 2;
    private string logfileName_ = "";
    /// <summary>
    ///*binlog/redolog 文件名*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogfileName {
      get { return logfileName_; }
      set {
        logfileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logfileOffset" field.</summary>
    public const int LogfileOffsetFieldNumber = 3;
    private long logfileOffset_;
    /// <summary>
    ///*binlog/redolog 文件的偏移位置*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LogfileOffset {
      get { return logfileOffset_; }
      set {
        logfileOffset_ = value;
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private long serverId_;
    /// <summary>
    ///*服务端serverId*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "serverenCode" field.</summary>
    public const int ServerenCodeFieldNumber = 5;
    private string serverenCode_ = "";
    /// <summary>
    ///* 变更数据的编码 *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerenCode {
      get { return serverenCode_; }
      set {
        serverenCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "executeTime" field.</summary>
    public const int ExecuteTimeFieldNumber = 6;
    private long executeTime_;
    /// <summary>
    ///*变更数据的执行时间 *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecuteTime {
      get { return executeTime_; }
      set {
        executeTime_ = value;
      }
    }

    /// <summary>Field number for the "sourceType" field.</summary>
    public const int SourceTypeFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CanalSharp.Protocol.Type SourceType {
      get { return sourceTypePresentCase_ == SourceTypePresentOneofCase.SourceType ? (global::CanalSharp.Protocol.Type) sourceTypePresent_ : global::CanalSharp.Protocol.Type.Compatibleproto2; }
      set {
        sourceTypePresent_ = value;
        sourceTypePresentCase_ = SourceTypePresentOneofCase.SourceType;
      }
    }

    /// <summary>Field number for the "schemaName" field.</summary>
    public const int SchemaNameFieldNumber = 8;
    private string schemaName_ = "";
    /// <summary>
    ///* 变更数据的schemaname*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SchemaName {
      get { return schemaName_; }
      set {
        schemaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tableName" field.</summary>
    public const int TableNameFieldNumber = 9;
    private string tableName_ = "";
    /// <summary>
    ///*变更数据的tablename*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eventLength" field.</summary>
    public const int EventLengthFieldNumber = 10;
    private long eventLength_;
    /// <summary>
    ///*每个event的长度*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EventLength {
      get { return eventLength_; }
      set {
        eventLength_ = value;
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CanalSharp.Protocol.EventType EventType {
      get { return eventTypePresentCase_ == EventTypePresentOneofCase.EventType ? (global::CanalSharp.Protocol.EventType) eventTypePresent_ : global::CanalSharp.Protocol.EventType.Compatibleproto2; }
      set {
        eventTypePresent_ = value;
        eventTypePresentCase_ = EventTypePresentOneofCase.EventType;
      }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::CanalSharp.Protocol.Pair> _repeated_props_codec
        = pb::FieldCodec.ForMessage(98, global::CanalSharp.Protocol.Pair.Parser);
    private readonly pbc::RepeatedField<global::CanalSharp.Protocol.Pair> props_ = new pbc::RepeatedField<global::CanalSharp.Protocol.Pair>();
    /// <summary>
    ///*预留扩展*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CanalSharp.Protocol.Pair> Props {
      get { return props_; }
    }

    /// <summary>Field number for the "gtid" field.</summary>
    public const int GtidFieldNumber = 13;
    private string gtid_ = "";
    /// <summary>
    ///*当前事务的gitd*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gtid {
      get { return gtid_; }
      set {
        gtid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object versionPresent_;
    /// <summary>Enum of possible cases for the "version_present" oneof.</summary>
    public enum VersionPresentOneofCase {
      None = 0,
      Version = 1,
    }
    private VersionPresentOneofCase versionPresentCase_ = VersionPresentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionPresentOneofCase VersionPresentCase {
      get { return versionPresentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersionPresent() {
      versionPresentCase_ = VersionPresentOneofCase.None;
      versionPresent_ = null;
    }

    private object sourceTypePresent_;
    /// <summary>Enum of possible cases for the "sourceType_present" oneof.</summary>
    public enum SourceTypePresentOneofCase {
      None = 0,
      SourceType = 7,
    }
    private SourceTypePresentOneofCase sourceTypePresentCase_ = SourceTypePresentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceTypePresentOneofCase SourceTypePresentCase {
      get { return sourceTypePresentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSourceTypePresent() {
      sourceTypePresentCase_ = SourceTypePresentOneofCase.None;
      sourceTypePresent_ = null;
    }

    private object eventTypePresent_;
    /// <summary>Enum of possible cases for the "eventType_present" oneof.</summary>
    public enum EventTypePresentOneofCase {
      None = 0,
      EventType = 11,
    }
    private EventTypePresentOneofCase eventTypePresentCase_ = EventTypePresentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypePresentOneofCase EventTypePresentCase {
      get { return eventTypePresentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventTypePresent() {
      eventTypePresentCase_ = EventTypePresentOneofCase.None;
      eventTypePresent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (LogfileName != other.LogfileName) return false;
      if (LogfileOffset != other.LogfileOffset) return false;
      if (ServerId != other.ServerId) return false;
      if (ServerenCode != other.ServerenCode) return false;
      if (ExecuteTime != other.ExecuteTime) return false;
      if (SourceType != other.SourceType) return false;
      if (SchemaName != other.SchemaName) return false;
      if (TableName != other.TableName) return false;
      if (EventLength != other.EventLength) return false;
      if (EventType != other.EventType) return false;
      if(!props_.Equals(other.props_)) return false;
      if (Gtid != other.Gtid) return false;
      if (VersionPresentCase != other.VersionPresentCase) return false;
      if (SourceTypePresentCase != other.SourceTypePresentCase) return false;
      if (EventTypePresentCase != other.EventTypePresentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (versionPresentCase_ == VersionPresentOneofCase.Version) hash ^= Version.GetHashCode();
      if (LogfileName.Length != 0) hash ^= LogfileName.GetHashCode();
      if (LogfileOffset != 0L) hash ^= LogfileOffset.GetHashCode();
      if (ServerId != 0L) hash ^= ServerId.GetHashCode();
      if (ServerenCode.Length != 0) hash ^= ServerenCode.GetHashCode();
      if (ExecuteTime != 0L) hash ^= ExecuteTime.GetHashCode();
      if (sourceTypePresentCase_ == SourceTypePresentOneofCase.SourceType) hash ^= SourceType.GetHashCode();
      if (SchemaName.Length != 0) hash ^= SchemaName.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (EventLength != 0L) hash ^= EventLength.GetHashCode();
      if (eventTypePresentCase_ == EventTypePresentOneofCase.EventType) hash ^= EventType.GetHashCode();
      hash ^= props_.GetHashCode();
      if (Gtid.Length != 0) hash ^= Gtid.GetHashCode();
      hash ^= (int) versionPresentCase_;
      hash ^= (int) sourceTypePresentCase_;
      hash ^= (int) eventTypePresentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (versionPresentCase_ == VersionPresentOneofCase.Version) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (LogfileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LogfileName);
      }
      if (LogfileOffset != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LogfileOffset);
      }
      if (ServerId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ServerId);
      }
      if (ServerenCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ServerenCode);
      }
      if (ExecuteTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExecuteTime);
      }
      if (sourceTypePresentCase_ == SourceTypePresentOneofCase.SourceType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) SourceType);
      }
      if (SchemaName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SchemaName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TableName);
      }
      if (EventLength != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(EventLength);
      }
      if (eventTypePresentCase_ == EventTypePresentOneofCase.EventType) {
        output.WriteRawTag(88);
        output.WriteEnum((int) EventType);
      }
      props_.WriteTo(output, _repeated_props_codec);
      if (Gtid.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Gtid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (versionPresentCase_ == VersionPresentOneofCase.Version) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (LogfileName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LogfileName);
      }
      if (LogfileOffset != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LogfileOffset);
      }
      if (ServerId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ServerId);
      }
      if (ServerenCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ServerenCode);
      }
      if (ExecuteTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ExecuteTime);
      }
      if (sourceTypePresentCase_ == SourceTypePresentOneofCase.SourceType) {
        output.WriteRawTag(56);
        output.WriteEnum((int) SourceType);
      }
      if (SchemaName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SchemaName);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TableName);
      }
      if (EventLength != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(EventLength);
      }
      if (eventTypePresentCase_ == EventTypePresentOneofCase.EventType) {
        output.WriteRawTag(88);
        output.WriteEnum((int) EventType);
      }
      props_.WriteTo(ref output, _repeated_props_codec);
      if (Gtid.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Gtid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (versionPresentCase_ == VersionPresentOneofCase.Version) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (LogfileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogfileName);
      }
      if (LogfileOffset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LogfileOffset);
      }
      if (ServerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerId);
      }
      if (ServerenCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerenCode);
      }
      if (ExecuteTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecuteTime);
      }
      if (sourceTypePresentCase_ == SourceTypePresentOneofCase.SourceType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SourceType);
      }
      if (SchemaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SchemaName);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (EventLength != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventLength);
      }
      if (eventTypePresentCase_ == EventTypePresentOneofCase.EventType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      size += props_.CalculateSize(_repeated_props_codec);
      if (Gtid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gtid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.LogfileName.Length != 0) {
        LogfileName = other.LogfileName;
      }
      if (other.LogfileOffset != 0L) {
        LogfileOffset = other.LogfileOffset;
      }
      if (other.ServerId != 0L) {
        ServerId = other.ServerId;
      }
      if (other.ServerenCode.Length != 0) {
        ServerenCode = other.ServerenCode;
      }
      if (other.ExecuteTime != 0L) {
        ExecuteTime = other.ExecuteTime;
      }
      if (other.SchemaName.Length != 0) {
        SchemaName = other.SchemaName;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.EventLength != 0L) {
        EventLength = other.EventLength;
      }
      props_.Add(other.props_);
      if (other.Gtid.Length != 0) {
        Gtid = other.Gtid;
      }
      switch (other.VersionPresentCase) {
        case VersionPresentOneofCase.Version:
          Version = other.Version;
          break;
      }

      switch (other.SourceTypePresentCase) {
        case SourceTypePresentOneofCase.SourceType:
          SourceType = other.SourceType;
          break;
      }

      switch (other.EventTypePresentCase) {
        case EventTypePresentOneofCase.EventType:
          EventType = other.EventType;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            LogfileName = input.ReadString();
            break;
          }
          case 24: {
            LogfileOffset = input.ReadInt64();
            break;
          }
          case 32: {
            ServerId = input.ReadInt64();
            break;
          }
          case 42: {
            ServerenCode = input.ReadString();
            break;
          }
          case 48: {
            ExecuteTime = input.ReadInt64();
            break;
          }
          case 56: {
            sourceTypePresent_ = input.ReadEnum();
            sourceTypePresentCase_ = SourceTypePresentOneofCase.SourceType;
            break;
          }
          case 66: {
            SchemaName = input.ReadString();
            break;
          }
          case 74: {
            TableName = input.ReadString();
            break;
          }
          case 80: {
            EventLength = input.ReadInt64();
            break;
          }
          case 88: {
            eventTypePresent_ = input.ReadEnum();
            eventTypePresentCase_ = EventTypePresentOneofCase.EventType;
            break;
          }
          case 98: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
          case 106: {
            Gtid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            LogfileName = input.ReadString();
            break;
          }
          case 24: {
            LogfileOffset = input.ReadInt64();
            break;
          }
          case 32: {
            ServerId = input.ReadInt64();
            break;
          }
          case 42: {
            ServerenCode = input.ReadString();
            break;
          }
          case 48: {
            ExecuteTime = input.ReadInt64();
            break;
          }
          case 56: {
            sourceTypePresent_ = input.ReadEnum();
            sourceTypePresentCase_ = SourceTypePresentOneofCase.SourceType;
            break;
          }
          case 66: {
            SchemaName = input.ReadString();
            break;
          }
          case 74: {
            TableName = input.ReadString();
            break;
          }
          case 80: {
            EventLength = input.ReadInt64();
            break;
          }
          case 88: {
            eventTypePresent_ = input.ReadEnum();
            eventTypePresentCase_ = EventTypePresentOneofCase.EventType;
            break;
          }
          case 98: {
            props_.AddEntriesFrom(ref input, _repeated_props_codec);
            break;
          }
          case 106: {
            Gtid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*每个字段的数据结构*
  /// </summary>
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CanalSharp.Protocol.CanalEntryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Column(Column other) : this() {
      index_ = other.index_;
      sqlType_ = other.sqlType_;
      name_ = other.name_;
      isKey_ = other.isKey_;
      updated_ = other.updated_;
      props_ = other.props_.Clone();
      value_ = other.value_;
      length_ = other.length_;
      mysqlType_ = other.mysqlType_;
      switch (other.IsNullPresentCase) {
        case IsNullPresentOneofCase.IsNull:
          IsNull = other.IsNull;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///*字段下标*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "sqlType" field.</summary>
    public const int SqlTypeFieldNumber = 2;
    private int sqlType_;
    /// <summary>
    ///*字段java中类型*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SqlType {
      get { return sqlType_; }
      set {
        sqlType_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///*字段名称(忽略大小写)，在mysql中是没有的*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isKey" field.</summary>
    public const int IsKeyFieldNumber = 4;
    private bool isKey_;
    /// <summary>
    ///*是否是主键*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKey {
      get { return isKey_; }
      set {
        isKey_ = value;
      }
    }

    /// <summary>Field number for the "updated" field.</summary>
    public const int UpdatedFieldNumber = 5;
    private bool updated_;
    /// <summary>
    ///*如果EventType=UPDATE,用于标识这个字段值是否有修改*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Updated {
      get { return updated_; }
      set {
        updated_ = value;
      }
    }

    /// <summary>Field number for the "isNull" field.</summary>
    public const int IsNullFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNull {
      get { return isNullPresentCase_ == IsNullPresentOneofCase.IsNull ? (bool) isNullPresent_ : false; }
      set {
        isNullPresent_ = value;
        isNullPresentCase_ = IsNullPresentOneofCase.IsNull;
      }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::CanalSharp.Protocol.Pair> _repeated_props_codec
        = pb::FieldCodec.ForMessage(58, global::CanalSharp.Protocol.Pair.Parser);
    private readonly pbc::RepeatedField<global::CanalSharp.Protocol.Pair> props_ = new pbc::RepeatedField<global::CanalSharp.Protocol.Pair>();
    /// <summary>
    ///*预留扩展*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CanalSharp.Protocol.Pair> Props {
      get { return props_; }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 8;
    private string value_ = "";
    /// <summary>
    ///* 字段值,timestamp,Datetime是一个时间格式的文本 *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 9;
    private int length_;
    /// <summary>
    ///* 对应数据对象原始长度 *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "mysqlType" field.</summary>
    public const int MysqlTypeFieldNumber = 10;
    private string mysqlType_ = "";
    /// <summary>
    ///*字段mysql类型*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MysqlType {
      get { return mysqlType_; }
      set {
        mysqlType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object isNullPresent_;
    /// <summary>Enum of possible cases for the "isNull_present" oneof.</summary>
    public enum IsNullPresentOneofCase {
      None = 0,
      IsNull = 6,
    }
    private IsNullPresentOneofCase isNullPresentCase_ = IsNullPresentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsNullPresentOneofCase IsNullPresentCase {
      get { return isNullPresentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsNullPresent() {
      isNullPresentCase_ = IsNullPresentOneofCase.None;
      isNullPresent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (SqlType != other.SqlType) return false;
      if (Name != other.Name) return false;
      if (IsKey != other.IsKey) return false;
      if (Updated != other.Updated) return false;
      if (IsNull != other.IsNull) return false;
      if(!props_.Equals(other.props_)) return false;
      if (Value != other.Value) return false;
      if (Length != other.Length) return false;
      if (MysqlType != other.MysqlType) return false;
      if (IsNullPresentCase != other.IsNullPresentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (SqlType != 0) hash ^= SqlType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsKey != false) hash ^= IsKey.GetHashCode();
      if (Updated != false) hash ^= Updated.GetHashCode();
      if (isNullPresentCase_ == IsNullPresentOneofCase.IsNull) hash ^= IsNull.GetHashCode();
      hash ^= props_.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (MysqlType.Length != 0) hash ^= MysqlType.GetHashCode();
      hash ^= (int) isNullPresentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (SqlType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SqlType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (IsKey != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsKey);
      }
      if (Updated != false) {
        output.WriteRawTag(40);
        output.WriteBool(Updated);
      }
      if (isNullPresentCase_ == IsNullPresentOneofCase.IsNull) {
        output.WriteRawTag(48);
        output.WriteBool(IsNull);
      }
      props_.WriteTo(output, _repeated_props_codec);
      if (Value.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Value);
      }
      if (Length != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Length);
      }
      if (MysqlType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(MysqlType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (SqlType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SqlType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (IsKey != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsKey);
      }
      if (Updated != false) {
        output.WriteRawTag(40);
        output.WriteBool(Updated);
      }
      if (isNullPresentCase_ == IsNullPresentOneofCase.IsNull) {
        output.WriteRawTag(48);
        output.WriteBool(IsNull);
      }
      props_.WriteTo(ref output, _repeated_props_codec);
      if (Value.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Value);
      }
      if (Length != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Length);
      }
      if (MysqlType.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(MysqlType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (SqlType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SqlType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsKey != false) {
        size += 1 + 1;
      }
      if (Updated != false) {
        size += 1 + 1;
      }
      if (isNullPresentCase_ == IsNullPresentOneofCase.IsNull) {
        size += 1 + 1;
      }
      size += props_.CalculateSize(_repeated_props_codec);
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (MysqlType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MysqlType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.SqlType != 0) {
        SqlType = other.SqlType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsKey != false) {
        IsKey = other.IsKey;
      }
      if (other.Updated != false) {
        Updated = other.Updated;
      }
      props_.Add(other.props_);
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.MysqlType.Length != 0) {
        MysqlType = other.MysqlType;
      }
      switch (other.IsNullPresentCase) {
        case IsNullPresentOneofCase.IsNull:
          IsNull = other.IsNull;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            SqlType = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            IsKey = input.ReadBool();
            break;
          }
          case 40: {
            Updated = input.ReadBool();
            break;
          }
          case 48: {
            IsNull = input.ReadBool();
            break;
          }
          case 58: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
          case 66: {
            Value = input.ReadString();
            break;
          }
          case 72: {
            Length = input.ReadInt32();
            break;
          }
          case 82: {
            MysqlType = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            SqlType = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            IsKey = input.ReadBool();
            break;
          }
          case 40: {
            Updated = input.ReadBool();
            break;
          }
          case 48: {
            IsNull = input.ReadBool();
            break;
          }
          case 58: {
            props_.AddEntriesFrom(ref input, _repeated_props_codec);
            break;
          }
          case 66: {
            Value = input.ReadString();
            break;
          }
          case 72: {
            Length = input.ReadInt32();
            break;
          }
          case 82: {
            MysqlType = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RowData : pb::IMessage<RowData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RowData> _parser = new pb::MessageParser<RowData>(() => new RowData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RowData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CanalSharp.Protocol.CanalEntryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowData(RowData other) : this() {
      beforeColumns_ = other.beforeColumns_.Clone();
      afterColumns_ = other.afterColumns_.Clone();
      props_ = other.props_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowData Clone() {
      return new RowData(this);
    }

    /// <summary>Field number for the "beforeColumns" field.</summary>
    public const int BeforeColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CanalSharp.Protocol.Column> _repeated_beforeColumns_codec
        = pb::FieldCodec.ForMessage(10, global::CanalSharp.Protocol.Column.Parser);
    private readonly pbc::RepeatedField<global::CanalSharp.Protocol.Column> beforeColumns_ = new pbc::RepeatedField<global::CanalSharp.Protocol.Column>();
    /// <summary>
    ///* 字段信息，增量数据(修改前,删除前) *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CanalSharp.Protocol.Column> BeforeColumns {
      get { return beforeColumns_; }
    }

    /// <summary>Field number for the "afterColumns" field.</summary>
    public const int AfterColumnsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CanalSharp.Protocol.Column> _repeated_afterColumns_codec
        = pb::FieldCodec.ForMessage(18, global::CanalSharp.Protocol.Column.Parser);
    private readonly pbc::RepeatedField<global::CanalSharp.Protocol.Column> afterColumns_ = new pbc::RepeatedField<global::CanalSharp.Protocol.Column>();
    /// <summary>
    ///* 字段信息，增量数据(修改后,新增后)  *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CanalSharp.Protocol.Column> AfterColumns {
      get { return afterColumns_; }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::CanalSharp.Protocol.Pair> _repeated_props_codec
        = pb::FieldCodec.ForMessage(26, global::CanalSharp.Protocol.Pair.Parser);
    private readonly pbc::RepeatedField<global::CanalSharp.Protocol.Pair> props_ = new pbc::RepeatedField<global::CanalSharp.Protocol.Pair>();
    /// <summary>
    ///*预留扩展*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CanalSharp.Protocol.Pair> Props {
      get { return props_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RowData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RowData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!beforeColumns_.Equals(other.beforeColumns_)) return false;
      if(!afterColumns_.Equals(other.afterColumns_)) return false;
      if(!props_.Equals(other.props_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= beforeColumns_.GetHashCode();
      hash ^= afterColumns_.GetHashCode();
      hash ^= props_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      beforeColumns_.WriteTo(output, _repeated_beforeColumns_codec);
      afterColumns_.WriteTo(output, _repeated_afterColumns_codec);
      props_.WriteTo(output, _repeated_props_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      beforeColumns_.WriteTo(ref output, _repeated_beforeColumns_codec);
      afterColumns_.WriteTo(ref output, _repeated_afterColumns_codec);
      props_.WriteTo(ref output, _repeated_props_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += beforeColumns_.CalculateSize(_repeated_beforeColumns_codec);
      size += afterColumns_.CalculateSize(_repeated_afterColumns_codec);
      size += props_.CalculateSize(_repeated_props_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RowData other) {
      if (other == null) {
        return;
      }
      beforeColumns_.Add(other.beforeColumns_);
      afterColumns_.Add(other.afterColumns_);
      props_.Add(other.props_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            beforeColumns_.AddEntriesFrom(input, _repeated_beforeColumns_codec);
            break;
          }
          case 18: {
            afterColumns_.AddEntriesFrom(input, _repeated_afterColumns_codec);
            break;
          }
          case 26: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            beforeColumns_.AddEntriesFrom(ref input, _repeated_beforeColumns_codec);
            break;
          }
          case 18: {
            afterColumns_.AddEntriesFrom(ref input, _repeated_afterColumns_codec);
            break;
          }
          case 26: {
            props_.AddEntriesFrom(ref input, _repeated_props_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*message row 每行变更数据的数据结构*
  /// </summary>
  public sealed partial class RowChange : pb::IMessage<RowChange>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RowChange> _parser = new pb::MessageParser<RowChange>(() => new RowChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RowChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CanalSharp.Protocol.CanalEntryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowChange(RowChange other) : this() {
      tableId_ = other.tableId_;
      sql_ = other.sql_;
      rowDatas_ = other.rowDatas_.Clone();
      props_ = other.props_.Clone();
      ddlSchemaName_ = other.ddlSchemaName_;
      switch (other.EventTypePresentCase) {
        case EventTypePresentOneofCase.EventType:
          EventType = other.EventType;
          break;
      }

      switch (other.IsDdlPresentCase) {
        case IsDdlPresentOneofCase.IsDdl:
          IsDdl = other.IsDdl;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RowChange Clone() {
      return new RowChange(this);
    }

    /// <summary>Field number for the "tableId" field.</summary>
    public const int TableIdFieldNumber = 1;
    private long tableId_;
    /// <summary>
    ///*tableId,由数据库产生*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TableId {
      get { return tableId_; }
      set {
        tableId_ = value;
      }
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CanalSharp.Protocol.EventType EventType {
      get { return eventTypePresentCase_ == EventTypePresentOneofCase.EventType ? (global::CanalSharp.Protocol.EventType) eventTypePresent_ : global::CanalSharp.Protocol.EventType.Compatibleproto2; }
      set {
        eventTypePresent_ = value;
        eventTypePresentCase_ = EventTypePresentOneofCase.EventType;
      }
    }

    /// <summary>Field number for the "isDdl" field.</summary>
    public const int IsDdlFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDdl {
      get { return isDdlPresentCase_ == IsDdlPresentOneofCase.IsDdl ? (bool) isDdlPresent_ : false; }
      set {
        isDdlPresent_ = value;
        isDdlPresentCase_ = IsDdlPresentOneofCase.IsDdl;
      }
    }

    /// <summary>Field number for the "sql" field.</summary>
    public const int SqlFieldNumber = 11;
    private string sql_ = "";
    /// <summary>
    ///* ddl/query的sql语句  *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sql {
      get { return sql_; }
      set {
        sql_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rowDatas" field.</summary>
    public const int RowDatasFieldNumber = 12;
    private static readonly pb::FieldCodec<global::CanalSharp.Protocol.RowData> _repeated_rowDatas_codec
        = pb::FieldCodec.ForMessage(98, global::CanalSharp.Protocol.RowData.Parser);
    private readonly pbc::RepeatedField<global::CanalSharp.Protocol.RowData> rowDatas_ = new pbc::RepeatedField<global::CanalSharp.Protocol.RowData>();
    /// <summary>
    ///* 一次数据库变更可能存在多行  *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CanalSharp.Protocol.RowData> RowDatas {
      get { return rowDatas_; }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::CanalSharp.Protocol.Pair> _repeated_props_codec
        = pb::FieldCodec.ForMessage(106, global::CanalSharp.Protocol.Pair.Parser);
    private readonly pbc::RepeatedField<global::CanalSharp.Protocol.Pair> props_ = new pbc::RepeatedField<global::CanalSharp.Protocol.Pair>();
    /// <summary>
    ///*预留扩展*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CanalSharp.Protocol.Pair> Props {
      get { return props_; }
    }

    /// <summary>Field number for the "ddlSchemaName" field.</summary>
    public const int DdlSchemaNameFieldNumber = 14;
    private string ddlSchemaName_ = "";
    /// <summary>
    ///* ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName  *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DdlSchemaName {
      get { return ddlSchemaName_; }
      set {
        ddlSchemaName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object eventTypePresent_;
    /// <summary>Enum of possible cases for the "eventType_present" oneof.</summary>
    public enum EventTypePresentOneofCase {
      None = 0,
      EventType = 2,
    }
    private EventTypePresentOneofCase eventTypePresentCase_ = EventTypePresentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventTypePresentOneofCase EventTypePresentCase {
      get { return eventTypePresentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEventTypePresent() {
      eventTypePresentCase_ = EventTypePresentOneofCase.None;
      eventTypePresent_ = null;
    }

    private object isDdlPresent_;
    /// <summary>Enum of possible cases for the "isDdl_present" oneof.</summary>
    public enum IsDdlPresentOneofCase {
      None = 0,
      IsDdl = 10,
    }
    private IsDdlPresentOneofCase isDdlPresentCase_ = IsDdlPresentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsDdlPresentOneofCase IsDdlPresentCase {
      get { return isDdlPresentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsDdlPresent() {
      isDdlPresentCase_ = IsDdlPresentOneofCase.None;
      isDdlPresent_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RowChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RowChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableId != other.TableId) return false;
      if (EventType != other.EventType) return false;
      if (IsDdl != other.IsDdl) return false;
      if (Sql != other.Sql) return false;
      if(!rowDatas_.Equals(other.rowDatas_)) return false;
      if(!props_.Equals(other.props_)) return false;
      if (DdlSchemaName != other.DdlSchemaName) return false;
      if (EventTypePresentCase != other.EventTypePresentCase) return false;
      if (IsDdlPresentCase != other.IsDdlPresentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableId != 0L) hash ^= TableId.GetHashCode();
      if (eventTypePresentCase_ == EventTypePresentOneofCase.EventType) hash ^= EventType.GetHashCode();
      if (isDdlPresentCase_ == IsDdlPresentOneofCase.IsDdl) hash ^= IsDdl.GetHashCode();
      if (Sql.Length != 0) hash ^= Sql.GetHashCode();
      hash ^= rowDatas_.GetHashCode();
      hash ^= props_.GetHashCode();
      if (DdlSchemaName.Length != 0) hash ^= DdlSchemaName.GetHashCode();
      hash ^= (int) eventTypePresentCase_;
      hash ^= (int) isDdlPresentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TableId);
      }
      if (eventTypePresentCase_ == EventTypePresentOneofCase.EventType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventType);
      }
      if (isDdlPresentCase_ == IsDdlPresentOneofCase.IsDdl) {
        output.WriteRawTag(80);
        output.WriteBool(IsDdl);
      }
      if (Sql.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Sql);
      }
      rowDatas_.WriteTo(output, _repeated_rowDatas_codec);
      props_.WriteTo(output, _repeated_props_codec);
      if (DdlSchemaName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(DdlSchemaName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TableId);
      }
      if (eventTypePresentCase_ == EventTypePresentOneofCase.EventType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EventType);
      }
      if (isDdlPresentCase_ == IsDdlPresentOneofCase.IsDdl) {
        output.WriteRawTag(80);
        output.WriteBool(IsDdl);
      }
      if (Sql.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Sql);
      }
      rowDatas_.WriteTo(ref output, _repeated_rowDatas_codec);
      props_.WriteTo(ref output, _repeated_props_codec);
      if (DdlSchemaName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(DdlSchemaName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TableId);
      }
      if (eventTypePresentCase_ == EventTypePresentOneofCase.EventType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (isDdlPresentCase_ == IsDdlPresentOneofCase.IsDdl) {
        size += 1 + 1;
      }
      if (Sql.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql);
      }
      size += rowDatas_.CalculateSize(_repeated_rowDatas_codec);
      size += props_.CalculateSize(_repeated_props_codec);
      if (DdlSchemaName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DdlSchemaName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RowChange other) {
      if (other == null) {
        return;
      }
      if (other.TableId != 0L) {
        TableId = other.TableId;
      }
      if (other.Sql.Length != 0) {
        Sql = other.Sql;
      }
      rowDatas_.Add(other.rowDatas_);
      props_.Add(other.props_);
      if (other.DdlSchemaName.Length != 0) {
        DdlSchemaName = other.DdlSchemaName;
      }
      switch (other.EventTypePresentCase) {
        case EventTypePresentOneofCase.EventType:
          EventType = other.EventType;
          break;
      }

      switch (other.IsDdlPresentCase) {
        case IsDdlPresentOneofCase.IsDdl:
          IsDdl = other.IsDdl;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TableId = input.ReadInt64();
            break;
          }
          case 16: {
            eventTypePresent_ = input.ReadEnum();
            eventTypePresentCase_ = EventTypePresentOneofCase.EventType;
            break;
          }
          case 80: {
            IsDdl = input.ReadBool();
            break;
          }
          case 90: {
            Sql = input.ReadString();
            break;
          }
          case 98: {
            rowDatas_.AddEntriesFrom(input, _repeated_rowDatas_codec);
            break;
          }
          case 106: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
          case 114: {
            DdlSchemaName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TableId = input.ReadInt64();
            break;
          }
          case 16: {
            eventTypePresent_ = input.ReadEnum();
            eventTypePresentCase_ = EventTypePresentOneofCase.EventType;
            break;
          }
          case 80: {
            IsDdl = input.ReadBool();
            break;
          }
          case 90: {
            Sql = input.ReadString();
            break;
          }
          case 98: {
            rowDatas_.AddEntriesFrom(ref input, _repeated_rowDatas_codec);
            break;
          }
          case 106: {
            props_.AddEntriesFrom(ref input, _repeated_props_codec);
            break;
          }
          case 114: {
            DdlSchemaName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*开始事务的一些信息*
  /// </summary>
  public sealed partial class TransactionBegin : pb::IMessage<TransactionBegin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransactionBegin> _parser = new pb::MessageParser<TransactionBegin>(() => new TransactionBegin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionBegin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CanalSharp.Protocol.CanalEntryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionBegin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionBegin(TransactionBegin other) : this() {
      executeTime_ = other.executeTime_;
      transactionId_ = other.transactionId_;
      props_ = other.props_.Clone();
      threadId_ = other.threadId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionBegin Clone() {
      return new TransactionBegin(this);
    }

    /// <summary>Field number for the "executeTime" field.</summary>
    public const int ExecuteTimeFieldNumber = 1;
    private long executeTime_;
    /// <summary>
    ///*已废弃，请使用header里的executeTime*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecuteTime {
      get { return executeTime_; }
      set {
        executeTime_ = value;
      }
    }

    /// <summary>Field number for the "transactionId" field.</summary>
    public const int TransactionIdFieldNumber = 2;
    private string transactionId_ = "";
    /// <summary>
    ///*已废弃，Begin里不提供事务id*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::CanalSharp.Protocol.Pair> _repeated_props_codec
        = pb::FieldCodec.ForMessage(26, global::CanalSharp.Protocol.Pair.Parser);
    private readonly pbc::RepeatedField<global::CanalSharp.Protocol.Pair> props_ = new pbc::RepeatedField<global::CanalSharp.Protocol.Pair>();
    /// <summary>
    ///*预留扩展*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CanalSharp.Protocol.Pair> Props {
      get { return props_; }
    }

    /// <summary>Field number for the "threadId" field.</summary>
    public const int ThreadIdFieldNumber = 4;
    private long threadId_;
    /// <summary>
    ///*执行的thread Id*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ThreadId {
      get { return threadId_; }
      set {
        threadId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionBegin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionBegin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExecuteTime != other.ExecuteTime) return false;
      if (TransactionId != other.TransactionId) return false;
      if(!props_.Equals(other.props_)) return false;
      if (ThreadId != other.ThreadId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExecuteTime != 0L) hash ^= ExecuteTime.GetHashCode();
      if (TransactionId.Length != 0) hash ^= TransactionId.GetHashCode();
      hash ^= props_.GetHashCode();
      if (ThreadId != 0L) hash ^= ThreadId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ExecuteTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ExecuteTime);
      }
      if (TransactionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TransactionId);
      }
      props_.WriteTo(output, _repeated_props_codec);
      if (ThreadId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ExecuteTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ExecuteTime);
      }
      if (TransactionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TransactionId);
      }
      props_.WriteTo(ref output, _repeated_props_codec);
      if (ThreadId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ThreadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExecuteTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecuteTime);
      }
      if (TransactionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
      }
      size += props_.CalculateSize(_repeated_props_codec);
      if (ThreadId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ThreadId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionBegin other) {
      if (other == null) {
        return;
      }
      if (other.ExecuteTime != 0L) {
        ExecuteTime = other.ExecuteTime;
      }
      if (other.TransactionId.Length != 0) {
        TransactionId = other.TransactionId;
      }
      props_.Add(other.props_);
      if (other.ThreadId != 0L) {
        ThreadId = other.ThreadId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ExecuteTime = input.ReadInt64();
            break;
          }
          case 18: {
            TransactionId = input.ReadString();
            break;
          }
          case 26: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
          case 32: {
            ThreadId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ExecuteTime = input.ReadInt64();
            break;
          }
          case 18: {
            TransactionId = input.ReadString();
            break;
          }
          case 26: {
            props_.AddEntriesFrom(ref input, _repeated_props_codec);
            break;
          }
          case 32: {
            ThreadId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*结束事务的一些信息*
  /// </summary>
  public sealed partial class TransactionEnd : pb::IMessage<TransactionEnd>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransactionEnd> _parser = new pb::MessageParser<TransactionEnd>(() => new TransactionEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CanalSharp.Protocol.CanalEntryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionEnd(TransactionEnd other) : this() {
      executeTime_ = other.executeTime_;
      transactionId_ = other.transactionId_;
      props_ = other.props_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionEnd Clone() {
      return new TransactionEnd(this);
    }

    /// <summary>Field number for the "executeTime" field.</summary>
    public const int ExecuteTimeFieldNumber = 1;
    private long executeTime_;
    /// <summary>
    ///*已废弃，请使用header里的executeTime*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecuteTime {
      get { return executeTime_; }
      set {
        executeTime_ = value;
      }
    }

    /// <summary>Field number for the "transactionId" field.</summary>
    public const int TransactionIdFieldNumber = 2;
    private string transactionId_ = "";
    /// <summary>
    ///*事务号*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "props" field.</summary>
    public const int PropsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::CanalSharp.Protocol.Pair> _repeated_props_codec
        = pb::FieldCodec.ForMessage(26, global::CanalSharp.Protocol.Pair.Parser);
    private readonly pbc::RepeatedField<global::CanalSharp.Protocol.Pair> props_ = new pbc::RepeatedField<global::CanalSharp.Protocol.Pair>();
    /// <summary>
    ///*预留扩展*
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CanalSharp.Protocol.Pair> Props {
      get { return props_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExecuteTime != other.ExecuteTime) return false;
      if (TransactionId != other.TransactionId) return false;
      if(!props_.Equals(other.props_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExecuteTime != 0L) hash ^= ExecuteTime.GetHashCode();
      if (TransactionId.Length != 0) hash ^= TransactionId.GetHashCode();
      hash ^= props_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ExecuteTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ExecuteTime);
      }
      if (TransactionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TransactionId);
      }
      props_.WriteTo(output, _repeated_props_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ExecuteTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ExecuteTime);
      }
      if (TransactionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TransactionId);
      }
      props_.WriteTo(ref output, _repeated_props_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExecuteTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecuteTime);
      }
      if (TransactionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
      }
      size += props_.CalculateSize(_repeated_props_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionEnd other) {
      if (other == null) {
        return;
      }
      if (other.ExecuteTime != 0L) {
        ExecuteTime = other.ExecuteTime;
      }
      if (other.TransactionId.Length != 0) {
        TransactionId = other.TransactionId;
      }
      props_.Add(other.props_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ExecuteTime = input.ReadInt64();
            break;
          }
          case 18: {
            TransactionId = input.ReadString();
            break;
          }
          case 26: {
            props_.AddEntriesFrom(input, _repeated_props_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ExecuteTime = input.ReadInt64();
            break;
          }
          case 18: {
            TransactionId = input.ReadString();
            break;
          }
          case 26: {
            props_.AddEntriesFrom(ref input, _repeated_props_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*预留扩展*
  /// </summary>
  public sealed partial class Pair : pb::IMessage<Pair>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Pair> _parser = new pb::MessageParser<Pair>(() => new Pair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CanalSharp.Protocol.CanalEntryReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair(Pair other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pair Clone() {
      return new Pair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pair other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
